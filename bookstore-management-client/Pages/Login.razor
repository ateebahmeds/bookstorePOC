@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-2">
        <label>Email:</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>

    <div class="form-group mb-2">
        <label>Password:</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-2">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var token = await AuthService.GetTokenFromSession();
        if (!string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/books");
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = null;
        try
        {
            var token = await AuthService.Login(loginModel.Email, loginModel.Password);
            if (!string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/books");
            }
            else
            {
                errorMessage = "Login failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
